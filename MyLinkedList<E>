package com.collection;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class MyLinkedList<E> implements Iterable<E> {

  private int size;
	private int modCount = 0;
	private Node<E> beginMarker;
	private Node<E> endMarker;
	
	public MyLinkedList() {
		clear();
	}
	
	public void clear() {
		beginMarker = new Node<E>(null, null, null);
		endMarker = new Node<E>(null, beginMarker, null);
		beginMarker.next = endMarker;
		size = 0;
		modCount++;
	}
	
	public int size() {
		return size;
	}
	
	public boolean isEmpty() {
		return size() == 0;
	}
	
	public void add(E e) {
		add(size(), e);
	}
	
	public void add(int idx, E e) {
		addBefore(getNode(idx), e);
	}
	
	public void addBefore(Node<E> p, E x){
		Node<E> newNode = new Node<E>(x, p.prev, p);
		newNode.prev.next = newNode;
		p.prev = newNode;
		size++;
		modCount++;
	}
	
	public void remove(Node<E> e){
		e.next.prev = e.prev;
		e.prev.next = e.next;
		size--;
		modCount++;
	}
	
	private Node<E> getNode(int idx){
		if(idx < 0 || idx > size){
			throw new ArrayIndexOutOfBoundsException();
		}
		Node<E> p;
		if(idx < size()/2){
			p = beginMarker.next;
			for(int i=0;i<idx;i++){
				p = p.next;
			}
		}else{
			p = endMarker;
			for(int i = size(); i > idx; i--){
				p = p.prev;
			}
		}
		return p;
	}
	@Override
	public Iterator<E> iterator() {
		// TODO Auto-generated method stub
		return new LinkedListIterator();
	}

	private static class Node<E> {
		public Node<E> prev;
		public Node<E> next;
		public E d;
		
		public Node(E d, Node<E> p, Node<E> n){
			this.d = d;
			this.prev = p;
			this.next = n;
		}
	}
	
	private class LinkedListIterator implements Iterator<E>{

		private Node<E> current = beginMarker.next;
		private boolean okToRemove = false;
		@Override
		public boolean hasNext() {
			// TODO Auto-generated method stub
			return current != endMarker;
		}

		@Override
		public E next() {
			if(!hasNext()){
				throw new NoSuchElementException();
			}
			E e = current.d;
			current = current.next;
			okToRemove = true;
			return e;
		}

		@Override
		public void remove() {
			if(!okToRemove)
				throw new IllegalStateException();
			MyLinkedList.this.remove(current.prev);
			okToRemove = false;
		}
	}
}
